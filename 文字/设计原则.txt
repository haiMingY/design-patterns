1. 单一职责原则(SRP Single responsibility principl)
    --核心思想:一个对象或者方法有且只有一个变化原因,就是只做一件事
    --优点:降低复杂度 ,提高代码的可读性,可维护性,降低对其他功能的影响


2. 最少知识原则(LKP Least KnowledgePrinciple)也称迪米特法则（Law of Demeter，LoD）
    --核心思想:应当尽量减少对象之间的联系。如果两个对象之间不必彼此直接通信，
    那么这两个对象就不要发生直接的相互联系。常见的做法是引入一个第三者对象，来承担这些对象之间的通信作用。
    如果一些对象需要向另一些对象发起请求，可以通过第三者对象来转发这些请求
    --优点:降低对象之间的耦合度

3. 开放-封闭原则(The Open-Closed Principle 、OCP)
    --核心思想:一个软件实体(类,模块,函数等)应对扩展开放,对修改关闭

4. 里氏代换原则(Liskov Substitution Principle LSP)
    --核心思想:所有引用基类的地方必须透明的使用其子类的对象.
            --只要父类能出现的地方子类也可以出现，而且替换为子类不会产生任何错误或异常，但是反过来就不行，有子类出现的地方，父类未必就能适应

5. 接口隔离原则(Interface Segregation Principle, ISP)
    --核心思想:客户端不应该依赖他不需要的接口;一个类对另一个类的依赖应该建立在最小的接口上.
        要诀:接口最小化原则,强调的是一个接口拥有的行为应尽可能的小

6. 依赖倒置原则 （Dependence Inversion Principle,DIP）
    --:● 高层模块不应该依赖低层模块，两者都应该依赖其抽象；
       ● 抽象不应该依赖细节；
       ● 细节应该依赖抽象